import os
import time
import json
from typing import Any, Dict, List, Optional, Set
import requests

# =========================
# Config from ENV
# =========================
API_URL = os.getenv("API_URL", "https://my.exnessaffiliates.com/api/reports/clients/").strip()
JWT_TOKEN = os.getenv("EXNESS_JWT", "").strip()         # ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "JWT "
TG_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
TG_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# Google Sheets
GSHEET_ID = os.getenv("GSHEET_ID", "").strip()
GSHEET_NAME = os.getenv("GSHEET_NAME", "clients_snapshot").strip()
GOOGLE_CREDS_PATH = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "").strip()
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON", "").strip()  # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå

# 0 = run once (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö cron / Railway job), >0 = loop (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Railway service)
POLL_SECONDS = int(os.getenv("POLL_SECONDS", "0"))
# ‡πÄ‡∏Å‡πá‡∏ö snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á client_account ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
STATE_FILE = os.getenv("STATE_FILE", "state_clients.json").strip()

# ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ state ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á true ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
FIRST_RUN_SILENT = os.getenv("FIRST_RUN_SILENT", "false").lower() in ("1", "true", "yes")

if not JWT_TOKEN or not TG_TOKEN or not TG_CHAT_ID:
    raise SystemExit("‚ùå Missing ENV: EXNESS_JWT, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID")

HEADERS = {
    "Accept": "application/json",
    "Authorization": JWT_TOKEN,  # format: "JWT <token>"
}

# =========================
# Telegram
# =========================
def send_tg(text: str):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    data = {"chat_id": TG_CHAT_ID, "text": text, "disable_web_page_preview": True}
    try:
        r = requests.post(url, data=data, timeout=20)
        r.raise_for_status()
    except Exception as e:
        print(f"‚ö†Ô∏è send_tg error: {e}")

# =========================
# API helpers
# =========================
def robust_get(url: str, params: Optional[Dict[str, Any]] = None, retries: int = 3, timeout: int = 30) -> requests.Response:
    for i in range(1, retries + 1):
        try:
            resp = requests.get(url, headers=HEADERS, params=params, timeout=timeout)
            if resp.status_code == 200:
                return resp
            if resp.status_code == 401:
                raise SystemExit("‚ùå Unauthorized (401) ‚Äì ‡∏ï‡∏£‡∏ß‡∏à EXNESS_JWT (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'JWT ' ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)")
            time.sleep(1.2 * i)
        except requests.RequestException as e:
            if i == retries:
                raise
            time.sleep(1.2 * i)
    raise SystemExit("‚ùå GET failed after retries")

def normalize_rows(payload: Any) -> List[Dict[str, Any]]:
    if isinstance(payload, list):
        return [x for x in payload if isinstance(x, dict)]
    if isinstance(payload, dict):
        if isinstance(payload.get("results"), list):
            return [x for x in payload["results"] if isinstance(x, dict)]
        if isinstance(payload.get("data"), list):
            return [x for x in payload["data"] if isinstance(x, dict)]
        return [payload]
    return []

def fetch_all_clients() -> List[Dict[str, Any]]:
    rows: List[Dict[str, Any]] = []
    next_url = API_URL
    params = None
    while next_url:
        resp = robust_get(next_url, params=params)
        try:
            payload = resp.json()
        except json.JSONDecodeError:
            raise SystemExit("‚ùå Response is not JSON")
        part = normalize_rows(payload)
        rows.extend(part)
        params = None
        if isinstance(payload, dict) and payload.get("next"):
            next_url = payload["next"]
        else:
            break
    return rows

# =========================
# State (for new detection)
# =========================
def extract_accounts(rows: List[Dict[str, Any]]) -> Set[str]:
    s: Set[str] = set()
    for r in rows:
        val = r.get("client_account")
        if val is not None:
            s.add(str(val).strip())
    return s

def load_state() -> Set[str]:
    if not os.path.exists(STATE_FILE):
        return set()
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return set(map(str, data.get("client_accounts", [])))
    except Exception:
        return set()

def save_state(accounts: Set[str]):
    payload = {"client_accounts": sorted(list(accounts))}
    os.makedirs(os.path.dirname(STATE_FILE) or ".", exist_ok=True)
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(payload, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è save_state error: {e}")

# =========================
# Google Sheets
# =========================
def ensure_gspread_client():
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á GOOGLE_APPLICATION_CREDENTIALS (‡πÑ‡∏ü‡∏•‡πå) ‡∏´‡∏£‡∏∑‡∏≠ GOOGLE_SERVICE_ACCOUNT_JSON (‡∏™‡∏ï‡∏£‡∏¥‡∏á)"""
    import gspread
    from google.oauth2.service_account import Credentials

    creds_path = GOOGLE_CREDS_PATH
    if not creds_path:
        if GOOGLE_CREDS_JSON:
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå
            creds_path = "/tmp/google_sa.json"
            try:
                os.makedirs("/tmp", exist_ok=True)
                with open(creds_path, "w", encoding="utf-8") as f:
                    f.write(GOOGLE_CREDS_JSON)
            except Exception as e:
                raise SystemExit(f"‚ùå Cannot write GOOGLE_SERVICE_ACCOUNT_JSON to /tmp: {e}")
        else:
            raise SystemExit("‚ùå Missing Google credentials: set either GOOGLE_APPLICATION_CREDENTIALS (file path) or GOOGLE_SERVICE_ACCOUNT_JSON (json string)")

    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_file(creds_path, scopes=scopes)
    gc = gspread.authorize(creds)
    return gc

def unique_columns(rows: List[Dict[str, Any]]) -> List[str]:
    cols = set()
    for r in rows:
        cols.update(r.keys())
    preferred = [
        "id", "partner_account", "partner_account_name", "client_uid",
        "client_account", "client_account_type", "country", "currency",
        "reg_date", "trade_finish", "volume_lots", "volume_usd",
        "reward", "reward_usd", "comment",
    ]
    rest = [c for c in sorted(cols) if c not in preferred]
    return [c for c in preferred if c in cols] + rest

def write_snapshot_to_gsheet(rows: List[Dict[str, Any]]):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πÅ‡∏ô‡πá‡∏õ‡∏ä‡∏≠‡∏ï‡∏•‡∏á‡∏ä‡∏µ‡∏ï: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î)"""
    if not GSHEET_ID:
        print("‚ö†Ô∏è GSHEET_ID not set; skip writing to Google Sheet.")
        return

    gc = ensure_gspread_client()
    sh = gc.open_by_key(GSHEET_ID)

    # ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á worksheet
    try:
        ws = sh.worksheet(GSHEET_NAME)
        ws.clear()
    except Exception:
        ws = sh.add_worksheet(title=GSHEET_NAME, rows="100", cols="26")

    if not rows:
        ws.update("A1", [["No data"]])
        print("‚úÖ Sheet updated (no rows).")
        return

    cols = unique_columns(rows)
    data = [cols]
    for r in rows:
        data.append([r.get(c, "") for c in cols])

    ws.update("A1", data)
    print(f"‚úÖ Wrote {len(rows)} rows to sheet '{GSHEET_NAME}'.")

# =========================
# Core flow
# =========================
def check_export_and_notify():
    """
    ‡∏•‡∏≥‡∏î‡∏±‡∏ö: ‡∏î‡∏∂‡∏á -> ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Google Sheet -> ‡πÅ‡∏à‡πâ‡∏á '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà' (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö state ‡πÄ‡∏î‡∏¥‡∏°) -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    """
    rows = fetch_all_clients()
    current = extract_accounts(rows)
    previous = load_state()
    total_now = len(current)

    # 1) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Google Sheet ‡∏™‡πÅ‡∏ô‡πá‡∏õ‡∏ä‡∏≠‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    write_snapshot_to_gsheet(rows)

    # 2) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡πÉ‡∏´‡∏°‡πà')
    if not previous:
        save_state(current)
        if not FIRST_RUN_SILENT:
            send_tg(f"üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet ‡πÅ‡∏•‡∏∞‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô client_account ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {total_now}")
        return

    new_accounts = sorted(list(current - previous))
    if new_accounts:
        if len(new_accounts) <= 30:
            msg = "üÜï ‡∏û‡∏ö client_account ‡πÉ‡∏´‡∏°‡πà:\n" + "\n".join(f"‚Ä¢ {a}" for a in new_accounts)
        else:
            msg = f"üÜï ‡∏û‡∏ö client_account ‡πÉ‡∏´‡∏°‡πà {len(new_accounts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        msg += f"\n\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô client_account ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {total_now}"
        send_tg(msg)
    else:
        print("No new accounts.")

    # 3) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    save_state(current)

def main():
    if POLL_SECONDS > 0:
        send_tg(f"‚è±Ô∏è ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å {POLL_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        while True:
            try:
                check_export_and_notify()
            except Exception as e:
                print(f"‚ùå loop error: {e}")
            time.sleep(POLL_SECONDS)
    else:
        check_export_and_notify()

if __name__ == "__main__":
    main()
