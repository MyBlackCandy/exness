import os
import time
import json
from typing import Any, Dict, List, Optional, Set
import requests

# =========================
# Config from ENV
# =========================
API_URL = os.getenv("API_URL", "https://my.exnessaffiliates.com/api/reports/clients/").strip()
JWT_TOKEN = os.getenv("EXNESS_JWT", "").strip()  # ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "JWT "
TG_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
TG_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# 0 = run once (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö cron / Railway job), >0 = loop (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Railway service)
POLL_SECONDS = int(os.getenv("POLL_SECONDS", "0"))
# ‡πÄ‡∏Å‡πá‡∏ö snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ volume /data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πâ‡∏≥‡∏ï‡∏≠‡∏ô‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ï)
STATE_FILE = os.getenv("STATE_FILE", "state_clients.json").strip()

# ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ state ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á true ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡πÅ‡∏•‡πâ‡∏ß"
FIRST_RUN_SILENT = os.getenv("FIRST_RUN_SILENT", "false").lower() in ("1", "true", "yes")

if not JWT_TOKEN or not TG_TOKEN or not TG_CHAT_ID:
    raise SystemExit("‚ùå Missing ENV: EXNESS_JWT, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID")

HEADERS = {
    "Accept": "application/json",
    "Authorization": JWT_TOKEN,  # format: "JWT <token>"
}


# =========================
# Utilities
# =========================
def send_tg(text: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram"""
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    data = {"chat_id": TG_CHAT_ID, "text": text, "disable_web_page_preview": True}
    try:
        r = requests.post(url, data=data, timeout=20)
        r.raise_for_status()
    except Exception as e:
        print(f"‚ö†Ô∏è send_tg error: {e}")


def robust_get(url: str, params: Optional[Dict[str, Any]] = None, retries: int = 3, timeout: int = 30) -> requests.Response:
    """GET ‡∏û‡∏£‡πâ‡∏≠‡∏° retry ‡πÅ‡∏•‡∏∞ error handling ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    for i in range(1, retries + 1):
        try:
            resp = requests.get(url, headers=HEADERS, params=params, timeout=timeout)
            if resp.status_code == 200:
                return resp
            if resp.status_code == 401:
                raise SystemExit("‚ùå Unauthorized (401) ‚Äì ‡∏ï‡∏£‡∏ß‡∏à EXNESS_JWT (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'JWT ' ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)")
            time.sleep(1.2 * i)
        except requests.RequestException as e:
            if i == retries:
                raise
            time.sleep(1.2 * i)
    raise SystemExit("‚ùå GET failed after retries")


def normalize_rows(payload: Any) -> List[Dict[str, Any]]:
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: list, {results:[]}, {data:[]}, ‡∏´‡∏£‡∏∑‡∏≠ object ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
    if isinstance(payload, list):
        return [x for x in payload if isinstance(x, dict)]
    if isinstance(payload, dict):
        if isinstance(payload.get("results"), list):
            return [x for x in payload["results"] if isinstance(x, dict)]
        if isinstance(payload.get("data"), list):
            return [x for x in payload["data"] if isinstance(x, dict)]
        return [payload]
    return []


def fetch_all_clients() -> List[Dict[str, Any]]:
    """‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ 'next' (‡∏™‡πÑ‡∏ï‡∏•‡πå Django REST Framework)"""
    rows: List[Dict[str, Any]] = []
    next_url = API_URL
    params = None
    while next_url:
        resp = robust_get(next_url, params=params)
        try:
            payload = resp.json()
        except json.JSONDecodeError:
            raise SystemExit("‚ùå Response is not JSON")
        part = normalize_rows(payload)
        rows.extend(part)
        params = None
        if isinstance(payload, dict) and payload.get("next"):
            next_url = payload["next"]
        else:
            break
    return rows


def extract_accounts(rows: List[Dict[str, Any]]) -> Set[str]:
    """‡∏î‡∏∂‡∏á set ‡∏Ç‡∏≠‡∏á client_account (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞ trim)"""
    s: Set[str] = set()
    for r in rows:
        val = r.get("client_account")
        if val is not None:
            s.add(str(val).strip())
    return s


def load_state() -> Set[str]:
    """‡∏≠‡πà‡∏≤‡∏ô snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    if not os.path.exists(STATE_FILE):
        return set()
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return set(map(str, data.get("client_accounts", [])))
    except Exception:
        return set()


def save_state(accounts: Set[str]):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å snapshot ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    payload = {"client_accounts": sorted(list(accounts))}
    os.makedirs(os.path.dirname(STATE_FILE) or ".", exist_ok=True)
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(payload, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è save_state error: {e}")


# =========================
# Core logic
# =========================
def check_and_notify():
    rows = fetch_all_clients()
    current = extract_accounts(rows)
    previous = load_state()

    total_now = len(current)  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    if not previous:
        save_state(current)
        if not FIRST_RUN_SILENT:
            send_tg(f"üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ client_account\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {total_now} accounts")
        return

    new_accounts = sorted(list(current - previous))
    missing_accounts = sorted(list(previous - current))

    if not new_accounts and not missing_accounts:
        print("No changes.")
        return

    msgs = []
    if new_accounts:
        if len(new_accounts) <= 20:
            msgs.append("üÜï ‡∏û‡∏ö client_account ‡πÉ‡∏´‡∏°‡πà:\n" + "\n".join(f"‚Ä¢ {a}" for a in new_accounts))
        else:
            msgs.append(f"üÜï ‡∏û‡∏ö client_account ‡πÉ‡∏´‡∏°‡πà {len(new_accounts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    if missing_accounts:
        if len(missing_accounts) <= 20:
            msgs.append("üóëÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå:\n" + "\n".join(f"‚Ä¢ {a}" for a in missing_accounts))
        else:
            msgs.append(f"üóëÔ∏è client_account ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ {len(missing_accounts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    msgs.append(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô client_account ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {total_now}")

    send_tg("\n\n".join(msgs))
    save_state(current)


def main():
    if POLL_SECONDS > 0:
        send_tg(f"‚è±Ô∏è ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å {POLL_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        while True:
            try:
                check_and_notify()
            except Exception as e:
                print(f"‚ùå loop error: {e}")
            time.sleep(POLL_SECONDS)
    else:
        # ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö cron/Job)
        check_and_notify()


if __name__ == "__main__":
    main()
